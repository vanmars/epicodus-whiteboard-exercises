PROBLEM
// Question #3: Compressing Strings
// Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

**********************

PLANNING
Input: "aaabccdddda"
Output: "3ab2c4da"
Edge Cases: Will need to be careful with first and last elements if I use a substring appraach; Will need to consider cases in which ending element is not the same as one before and cases in which it is equal to one before as you can't simply check if it is last element and return 
Questions/Research: Can I assume there will be no spaces separating elements in the string?

**********************

SOLUTION WITHOUT RECURSION

Psuedocode
const compressString = (string) => {
  // if the argument is not a string
    // return error message

  // create result variable and set to ""
  
  // Loop over string
    // if the item is the last element of the string and it does not equal the element before it
      // set result to equal result concatenated with that element

    // else if the index is 0 or the element is the first element of a substring
      // set index to the index of the first element that does not match the element 
      // if there is not element afterwards that is not a match
        // get substring (string.substring(i))
        // get length of substring
        // set concat result with length plus the that element at that string index
      // else
        // get substring up to the non matching index =  string.substring(i, i + index + 1)
        // get the length of the substring
        // if the substring lenght equals 1
          // just concat result with the string at the index
        // else
          // concat result with the length and the value at index
  
    // else
      // continue;
  // return result array
}


Algorithm
const compressString = (string) => {
  if (typeof string != 'string'){
    return 'Please enter a string.';
  };
  let result = ""
  for (i=0; i<string.length; i++){
    // If it is the last element of the string
    if (i === string.length-1 && string[i] !== string[i-1]) {
      result = result.concat(string[i]);
    // If it is 0 or the first of a substring
    } else if (i === 0 || string[i] !== string[i-1]) {
      const index = string.substring(i+1).split("").findIndex(e => e !== string[i]);
      // If it is first of substring that ends string
      if (index === -1) {
        const subStr = string.substring(i);
        const length = subStr.length.toString();
        result = result.concat(length).concat(string[i]); 
      } else {
        const subStr = string.substring(i, i + index + 1);
        const length = subStr.length.toString();
        // Only one element within string
        if (subStr.length === 1) {
          result = result.concat(string[i]);
        } else {
          result = result.concat(length).concat(string[i]);
        }
      }
    } else {
      continue;
    };
  };
  return result;
};

Testing
console.log(compressString("aaabccddddaa"));    // "3ab2c4d2a"
console.log(compressString("aaabccdddda"));     // "3ab2c4da"

**********************

SOLUTION WITH RECURSION

Psuedocode
const compressStringRecursion = (string) => {
  // Termination Case
  // if the string is not a string 
    // return an error message

  // Base Case
  // if the string has a length of 1
    return the string
  
   // Else Case
    // create array variable that stores result of splitting string 
    // crate index variable that finds first index where value doesnt equal arr[0]
    // if the index is not found 
      return the strings length (turned into a string) and concat with value of string at [0]
    // otherwise
      // create a substring of items at index 0 up to the index
      // create a substring of items from index to the end of string
        // if the first stubstring equals 1
          // just return that substring and invoke function again with substring 2
        // else
          // return the length first(turned to a string concatednated with the substring1[0] value concatednated with the function invoked again with substring 2
}

Algorithm
const compressStringRecursion = (string) => {
  // Termination Case
  if (typeof string != 'string'){
    return 'Please enter a string.';
  }
  // Base Case
  if (string.length === 1) {
    return string;
   // Else Case
  } else {
    let arr = string.split("");
    const index = arr.findIndex(e => e !== string[0]);
    if (index === -1){
      return string.length.toString().concat(string[0]);
    } else {
      const str1 = string.substring(0, index);
      const str2 = string.substring(index);
      if (str1.length === 1) {
        return str1 + compressStringRecursion(str2);
      } else {
      return str1.length.toString().concat(string[0]) + compressStringRecursion(str2);
      }
    }
  };
}

Testing
console.log(compressStringRecursion("aaabccddddaa"));  // "3ab2c4d2a"
console.log(compressStringRecursion("aaabccdddda"));  // "3ab2c4da"

**********************
